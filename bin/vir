#!/usr/bin/env ruby

# test mode:
if ($0 == 'bin/vir')
  $LOAD_PATH << 'lib' 
  require 'rubygems'
  require 'bundler/setup'
end

require 'set'
require 'user_input/option_parser'

require 'vir/version'
require 'vir/parser'

options = UserInput::OptionParser.new do |c|
  c.argument 'e', 'eval', "Code to evaluate", nil, String
  c.argument 'F', 'format', "Format to output tree information in for -P and -A. Can be pp|yaml|json", :pp, Set[:pp, :yaml, :json]
  c.argument 'O', 'output-tree', "Where to output the tree from -P, -A, or the bytecode from -C, if not stdout.", nil, String 
  c.flag 'P', 'parse-tree', "Show parse tree rather than evaluate. Currently this is the default."
  c.flag 'A', 'ast', "Show the abstract syntax tree rather than evaluate."
  c.flag 'C', 'compiled', "Show the compiled output rather than evaluate."
  c.gap
  c.flag 'v', 'version', "Print version" do
    puts(Vir::VERSION.join('.'))
    exit(1)
  end
  c.flag 'h', 'help', "Print help" do
    puts(c)
    exit(1)
  end
end
options.parse!(ARGV)

def print_tree(options, tree)
  output = $stdout
  begin
    if (options.output_tree)
      output = File.open(options.output_tree, "w")
    end

    case options.format
    when :pp
      require 'pp'
      PP.pp(tree, output)
    when :yaml
      require 'yaml'
      output.puts(tree.to_yaml)
    when :json
      require 'json'
      output.puts(tree.to_json(:max_nesting=>100))
    end
  ensure
    output.close if (options.output_tree)
  end
end

def parse(options, str)
  parser = Vir::Parser.new
  begin
    tree = parser.parse(str)
    if (true || options.parse_tree?)
      print_tree(options, tree)
    end
    if (options.ast?)
      puts("Error: Outputing AST not supported yet.")
    end
    if (options.compiled?)
      puts("Error: Outputing compiler output not supported yet.")
    end
    if (false && !options.parse_tree? && !options.ast? && !options.compiled?)
      puts("Error: Running code not supported yet.")
    end
  rescue Parslet::ParseFailed => m
    puts(m)
    begin
      puts parser.root.error_tree
    rescue StackError,SystemStackError # fix these at some point.
    end
  end
end

if (options.eval)
  parse(options, options.eval)
elsif (ARGV.length > 0)
  ARGV.each do |f|
    parse(options, File.read(f))
  end
end
